#!/bin/bash

# This script provides a simple interface for folks to use the docker install
coreimage=quay.io/blockstack/blockstack-core:latest
browserimage=quay.io/blockstack/blockstack-browser:latest
# Local Blockstack directory
homedir=$HOME/.blockstack
# Blockstack Directory inside container
containerdir=/root/.blockstack
# Name of Blockstack API container
corecontainer=blockstack-api
# Name of Blockstack Browser container
browsercontainer=blockstack-browser
# Local temporary directory
tmpdir=/tmp/.blockstack_tmp
if [ ! -e $tmpdir ]; then
   mkdir -p $tmpdir
fi
# set password blank so we know when to prompt
password=0


build () {
  echo "Building blockstack docker image. This might take a minute..."
  docker build -t $browserimage .
}

create-wallet () {
  if [ $# -eq 0 ]; then
    echo "Need to input new wallet password when running setup: ./launcher create-wallet mypass"
    exit 1
  fi
  docker run -it -v "$homedir":$containerdir $coreimage blockstack setup -y --password $1

  # Use init containers to set the API bind to 0.0.0.0
  docker run -it -v "$homedir":$containerdir $coreimage sed -i 's/api_endpoint_bind = localhost/api_endpoint_bind = 0.0.0.0/' $containerdir/client.ini
  docker run -it -v "$homedir":$containerdir $coreimage sed -i 's/api_endpoint_host = localhost/api_endpoint_host = 0.0.0.0/' $containerdir/client.ini
}

start-containers () {
  # Check for args first
  if [ $# -ne 0 ]; then
      password=$1
  fi

  # let's see if we should create a new wallet
  if [ ! -e "$homedir/wallet.json" ]; then
    if [ $password == "0" ]; then
      prompt-new-password
    fi
    echo "Wallet does not exist yet. Setting up wallet"
    create-wallet $password
  fi

  # otherwise, prompt for an OLD password
  if [ $password == "0" ]; then
      prompt-password
  fi

  # Check for the blockstack-api container is running or stopped.
  if [ "$(docker ps -q -f name=$corecontainer)" ]; then
    echo "blockstack core container is already running"
    exit 1
  elif [ ! "$(docker ps -q -f name=$corecontainer)" ]; then
    if [ "$(docker ps -aq -f status=exited -f name=$corecontainer)" ]; then
      # cleanup old container if its still around
      echo "removing old blockstack-core container..."
      docker rm $corecontainer
    fi

    if [ "$BLOCKSTACK_DEBUG" == "1" ]; then
      runcommand="bash"
    else
      runcommand="blockstack api start-foreground --password $password --api_password $password"
    fi

    # If there is no existing $corecontainer container, run one
    if [[ $(uname) == 'Linux' ]]; then
      docker run -dt --name $corecontainer -v "$tmpdir":/tmp -v "$homedir":$containerdir -p 6270:6270 $coreimage $runcommand
    elif [[ $(uname) == 'Darwin' ]]; then
      docker run -dt --name $corecontainer -v "$tmpdir":/tmp -v "$homedir":$containerdir -p 6270:6270 $coreimage $runcommand
    elif [[ $(uname) == 'Windows' || $(uname) == 'MINGW64_NT-10.0' ]]; then
      docker run -dt --name $corecontainer -v "$tmpdir":/tmp -v "$homedir":$containerdir -p 6270:6270 $coreimage $runcommand
    fi

    if [ "$BLOCKSTACK_DEBUG" == "1" ]; then
      docker exec -t $corecontainer apt-get install lsof
      docker exec -t $corecontainer blockstack api start --debug --password $password --api_password $password
    fi
  fi

  # Check for the blockstack-browser-* containers are running or stopped.
  if [ "$(docker ps -q -f name=$browsercontainer)" ]; then
    echo "browser containers are already running"
    exit 1
  elif [ ! "$(docker ps -q -f name=$browsercontainer)" ]; then
    if [ "$(docker ps -aq -f status=exited -f name=$browsercontainer)" ]; then
      # cleanup old containers if they are still around
      echo "removing old browser containers..."
      docker rm $(docker ps -aq -f status=exited -f name=$browsercontainer)
    fi

    # If there are no existing blockstack-browser-* containers, run them
    docker run -d --name $browsercontainer-static -p 8888:8888 $browserimage blockstack-browser
    docker run -d --name $browsercontainer-cors  -e CORSPROXY_HOST="0.0.0.0" -p 1337:1337 $browserimage blockstack-cors-proxy

    if [[ $(uname) == 'Linux' ]]; then
      sensible-browser "http://localhost:8888/#coreAPIPassword=$password"
    elif [[ $(uname) == 'Darwin' ]]; then
      open "http://localhost:8888/#coreAPIPassword=$password"
    elif [[ $(uname) == 'Windows' || $(uname) == 'MINGW64_NT-10.0' ]]; then
      start "http://localhost:8888/#coreAPIPassword=$password"
    fi
  fi
}

stop () {
  bc=$(docker ps -a -f name=$browsercontainer -q)
  cc=$(docker ps -f name=$corecontainer -q)
  if [ ! -z "$cc" ]; then
    echo "stopping the running blockstack-api container"
    docker stop $cc
    docker rm $cc
  fi

  if [ ! -z "$bc" ]; then
    echo "stopping the running blockstack-browser containers"
    docker stop $bc
    docker rm $bc
  fi
}

enter () {
  echo "entering docker container"
  docker exec -it $browsercontainer-static /bin/bash
}

logs () {
  echo "streaming logs for blockstack-api container"
  docker logs $browsercontainer-static -f
}

push () {
  echo "pushing build container up to quay.io..."
  docker push $browserimage
}

commands () {
  cat <<-EOF
blockstack docker launcher commands:
  start -> start the blockstack browser server
  stop -> stop the blockstack browser server
  logs -> access the logs from the blockstack browser server
  enter -> exec into the running docker container
EOF
}

prompt-new-password () {
  cat <<EOF


Please enter a password to protect your Blockstack core node.
IMPORTANT: This will be used to encrypt information stored within the containers
           which may include private keys for your Blockstack wallet.
           It is important that you remember this password.
           This will be the password you use to "pair" your Blockstack Browser
           with your Blockstack core node.

EOF
  echo -n "Password: " ; read -s password ; echo
  echo -n "Repeat: " ; read -s password_repeated ; echo
  while [ ! $password == $password_repeated ] ; do
      echo "Passwords do not match, please try again."
      echo -n "Password: " ; read -s password ; echo
      echo -n "Repeat: " ; read -s password_repeated ; echo
  done
}

prompt-password () {
  echo "Enter your Blockstack Core password: " ; read -s password; echo
}

case $1 in
  stop)
    stop
    ;;
  create-wallet)
    create-wallet $2
    ;;
  start)
    start-containers $2
    ;;
  logs)
    logs
    ;;
  build)
    build
    ;;
  enter)
    enter
    ;;
  push)
    push
    ;;
  build)
    build
    ;;
  *)
    commands
    ;;
esac
